#!/usr/bin/env bash
# This script was generated by bashly 1.1.1 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
gramps_usage() {
  if [[ -n $long_usage ]]; then
    printf "gramps - Pseudo-offline encrypted backup tool\n"
    echo

  else
    printf "gramps - Pseudo-offline encrypted backup tool\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  gramps COMMAND\n"
  printf "  gramps [COMMAND] --help | -h\n"
  printf "  gramps --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Generate a key pair and display the private key\n" "init"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
gramps_init_usage() {
  if [[ -n $long_usage ]]; then
    printf "gramps init - Generate a key pair and display the private key\n"
    echo

  else
    printf "gramps init - Generate a key pair and display the private key\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  gramps init DIRECTORY_PATH\n"
  printf "  gramps init --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DIRECTORY_PATH"
    printf "    Location where you want to save your data\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.user_lib
# src/lib/logging.sh
# shellcheck shell=bash

panic() {
    echo "FATAL: ${*}" >&2
    exit 1
}

# :command.command_functions
# :command.function
gramps_init_command() {
  # src/init_command.sh
  # shellcheck shell=bash

  # shellcheck disable=SC2154  # variables like ${args} are defined in main script
  directory_path="$(readlink --canonicalize "${args[directory_path]}")"
  pubkey_path="${directory_path}/.pubkey"
  readme_path="${directory_path}/README.md"

  test ! -f "${pubkey_path}" || panic "Already initialized: ${directory_path}"
  touch "${pubkey_path}"

  test ! -f "${readme_path}" || echo "WARNING: README.md already exists"
  touch "${readme_path}"

  private_key="$(
      age-keygen 2> /dev/null | grep --perl-regexp --only-matching '(?<=^AGE-SECRET-KEY-1).+$'
  )"

  echo "AGE-SECRET-KEY-1${private_key}" | age-keygen -y > "${pubkey_path}"

  echo "Here is your private key. Write it down. You will need it to decrypt"
  echo "files, however it will never be displayed again after this:"
  echo
  echo "  ${private_key:0:5} ${private_key:5:5} ${private_key:10:5} ${private_key:15:5}"
  echo "  ${private_key:20:5} ${private_key:25:5} ${private_key:30:5} ${private_key:35:5}"
  echo "  ${private_key:40:5} ${private_key:45:5} ${private_key:50:5} ${private_key:55:3}"

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        gramps_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    init)
      action="init"
      shift
      gramps_init_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      gramps_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
gramps_init_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        gramps_init_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="init"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['directory_path']+x} ]]; then

          args['directory_path']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['directory_path']+x} ]]; then
    printf "missing required argument: DIRECTORY_PATH\nusage: gramps init DIRECTORY_PATH\n" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -Eeuo pipefail

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "init") gramps_init_command ;;
  esac
}

initialize
run "$@"
