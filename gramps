#!/usr/bin/env bash
# This script was generated by bashly 1.1.1 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
gramps_usage() {
  if [[ -n $long_usage ]]; then
    printf "gramps - Pseudo-offline encrypted backup tool\n"
    echo

  else
    printf "gramps - Pseudo-offline encrypted backup tool\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  gramps COMMAND\n"
  printf "  gramps [COMMAND] --help | -h\n"
  printf "  gramps --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Initialize a new repository with a key pair and display the private key\n" "init   "
  printf "  %s   Encrypt a file using the repository's public key\n" "encrypt"
  printf "  %s   Decrypt a file using the offline private key\n" "decrypt"
  printf "  %s   Check file integrity\n" "check  "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "Environment Variables:"

    # :environment_variable.usage
    printf "  %s\n" "GRAMPS_DEFAULT_REPO"
    printf "    If no gramps repo is specified in a command, defaults to this path\n"
    echo

  fi
}

# :command.usage
gramps_init_usage() {
  if [[ -n $long_usage ]]; then
    printf "gramps init - Initialize a new repository with a key pair and display the private key\n"
    echo

  else
    printf "gramps init - Initialize a new repository with a key pair and display the private key\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  gramps init [REPOSITORY_PATH]\n"
  printf "  gramps init --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "REPOSITORY_PATH"
    printf "    Repository directory path. Defaults to \`GRAMPS_DEFAULT_REPO\` env variable.\n"
    echo

  fi
}

# :command.usage
gramps_encrypt_usage() {
  if [[ -n $long_usage ]]; then
    printf "gramps encrypt - Encrypt a file using the repository's public key\n"
    echo

  else
    printf "gramps encrypt - Encrypt a file using the repository's public key\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  gramps encrypt [INPUT_PATH] [OPTIONS]\n"
  printf "  gramps encrypt --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--repo, -d REPOSITORY_PATH"
    printf "    Repository directory path. Defaults to \`GRAMPS_DEFAULT_REPO\` env variable.\n"
    echo

    # :flag.usage
    printf "  %s\n" "--filename, -n FILE_NAME"
    printf "    Name of the ciphertext file in the repository. \`.age\` will be appended to\n    it. Only necessary if INPUT_PATH isn't specified.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "INPUT_PATH"
    printf "    Path to a plaintext file you want to encrypt\n"
    echo

  fi
}

# :command.usage
gramps_decrypt_usage() {
  if [[ -n $long_usage ]]; then
    printf "gramps decrypt - Decrypt a file using the offline private key\n"
    echo

  else
    printf "gramps decrypt - Decrypt a file using the offline private key\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  gramps decrypt INPUT_PATH [OUTPUT_PATH]\n"
  printf "  gramps decrypt --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "INPUT_PATH"
    printf "    Path to a file you want to decrypt\n"
    echo

    # :argument.usage
    printf "  %s\n" "OUTPUT_PATH"
    printf "    Path where you want to save the decrypted file (or stdout if not specified)\n"
    echo

  fi
}

# :command.usage
gramps_check_usage() {
  if [[ -n $long_usage ]]; then
    printf "gramps check - Check file integrity\n"
    echo

  else
    printf "gramps check - Check file integrity\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  gramps check DIRECTORY_PATH\n"
  printf "  gramps check --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DIRECTORY_PATH"
    printf "    Location where you are saving your files\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.user_lib
# src/lib/logging.sh
# shellcheck shell=bash

panic() {
    echo "FATAL: ${*}" >&2
    exit 1
}

# :command.command_functions
# :command.function
gramps_init_command() {
  # src/init_command.sh
  # shellcheck shell=bash
  # shellcheck disable=SC2154  # variables like ${args} are defined in main script

  repository_path="${args[repository_path]:-}"
  if [ "${repository_path}" == "" ]; then
      repository_path="${GRAMPS_DEFAULT_REPO:-}"
  fi

  test "${repository_path}" != "" || panic "Must specify a repository path via REPOSITORY_PATH parameter or GRAMPS_DEFAULT_REPO env variable."
  repository_path="$(readlink --canonicalize "${repository_path}")"

  gramps_dir="${repository_path}/.gramps"
  gramps_temp_dir="${gramps_dir}.tmp"
  pubkey_path="${gramps_temp_dir}/pubkey"
  readme_path="${repository_path}/README.md"

  rm -rf "${gramps_temp_dir}"
  mkdir -p "${gramps_temp_dir}"

  test ! -d "${gramps_dir}" || panic "Already initialized: ${repository_path}"
  test ! -f "${readme_path}" || echo "WARNING: README.md already exists."

  private_key="$(
      age-keygen 2> /dev/null | grep --perl-regexp --only-matching '(?<=^AGE-SECRET-KEY-1).+$'
  )"

  echo "AGE-SECRET-KEY-1${private_key}" | age-keygen -y > "${pubkey_path}"

  readme_content() {
      echo "# Gramps Pseudo-Offline Backup"
      echo
      echo "This is a [gramps](https://github.com/pcrockett/gramps) repository. \`gramps\` is just a Bash script"
      echo "wrapper for the [age](https://github.com/FiloSottile/age) encryption tool."
      echo
      echo "Any files you see here are encrypted with this public key:"
      echo
      echo "    $(cat "${pubkey_path}")"
      echo
      echo "The private key has been written down <!-- TODO: where did you write down your private key? -->"
      echo
      echo "When you have the private key, you can decrypt files with the command:"
      echo
      echo "    gramps decrypt [the_encrypted_file] [the_decrypted_file]"
      echo
  }

  readme_content > "${readme_path}"

  # prepend a version number to private key for future-proofing
  private_key="01${private_key}"

  mv "${gramps_temp_dir}" "${gramps_dir}"

  echo "Here is your private key. Write it down. You will need it to decrypt"
  echo "files, however it will never be displayed again after this:"
  echo "╭───────────────────────╮"
  echo "│${private_key:0:5} ${private_key:5:5} ${private_key:10:5} ${private_key:15:5}│"
  echo "│${private_key:20:5} ${private_key:25:5} ${private_key:30:5} ${private_key:35:5}│"
  echo "│${private_key:40:5} ${private_key:45:5} ${private_key:50:5} ${private_key:55:5}│"
  echo "╰───────────────────────╯"

}

# :command.function
gramps_encrypt_command() {
  # src/encrypt_command.sh
  # shellcheck shell=bash

  # shellcheck disable=SC2154  # variables like ${args} are defined in main script

  repo_path="${args["--repo"]:-}"
  if [ "${repo_path}" == "" ]; then
      repo_path="${GRAMPS_DEFAULT_REPO:-}"
  fi
  test "${repo_path}" != "" || panic "Must specify a repository path via --repo flag or GRAMPS_DEFAULT_REPO env variable."
  repo_path="$(readlink --canonicalize "${repo_path}")"

  out_file_name="${args["--filename"]:-}"

  input_path="${args[input_path]:-}"
  if [ "${input_path}" == "" ]; then
      test "${out_file_name}" != "" || panic "Must specify --filename flag when no INPUT_PATH is specified."
  elif [ "${out_file_name}" == "" ]; then
      out_file_name="$(basename "${input_path}")"
  fi

  output_path="$(readlink --canonicalize "${repo_path}/${out_file_name}.age")"
  test ! -e "${output_path}" || panic "Already exists: ${output_path}"

  gramps_dir="${repo_path}/.gramps"
  test -d "${gramps_dir}" || panic "Not a gramps repository: ${repo_path}"

  age_cmd=(
      age --encrypt --armor
      --recipients-file "${gramps_dir}/pubkey"
      --output "${output_path}"
  )

  if [ "${input_path}" == "" ]; then
      # reading from stdin
      "${age_cmd[@]}"
  else
      test -f "${input_path}" || panic "File not found: ${input_path}"
      "${age_cmd[@]}" "${input_path}"
  fi

  (
      cd "${repo_path}" || panic "unable to cd into ${repo_path}"
      sha256sum "$(basename "${output_path}")" >> "${gramps_dir}/sha256sum"
  )

  echo "File saved at ${output_path}"

}

# :command.function
gramps_decrypt_command() {
  # src/decrypt_command.sh
  # shellcheck shell=bash

  # shellcheck disable=SC2154  # variables like ${args} are defined in main script
  input_path="${args[input_path]}"
  test -f "${input_path}" || panic "File not found: ${input_path}"

  output_path="${args[output_path]:-}"

  private_key_input="$(cat | tr --delete '[:space:]')"
  input_len="${#private_key_input}"

  test "${input_len}" -eq 60 || panic "Invalid key format"

  version="${private_key_input:0:2}"

  test "${version}" = "01" || panic "Key generated by different version of gramps"

  age_identity="AGE-SECRET-KEY-1${private_key_input:2:58}"

  age_cmd=(
      age --decrypt
      --identity -
  )

  if [ "${output_path}" != "" ]; then
      test ! -e "${output_path}" || panic "Already exists: ${output_path}"
      age_cmd+=(--output "${output_path}")
  fi

  age_cmd+=("${input_path}")

  process_stderr() {
      # process `age --decrypt` stderr to improve known error messages.
      age_stderr="$(cat)"
      if echo "${age_stderr}" | grep --fixed-strings "age: error: no identity matched any of the recipients" &> /dev/null; then
          panic "Unable to decrypt; perhaps a mistyped key?"
      else
          echo "${age_stderr}" >&2
      fi
  }

  echo "${age_identity}" | "${age_cmd[@]}" 2> >(process_stderr)

}

# :command.function
gramps_check_command() {
  # src/check_command.sh
  # shellcheck shell=bash

  # shellcheck disable=SC2154  # variables like ${args} are defined in main script
  directory_path="${args[directory_path]}"
  gramps_dir="${directory_path}/.gramps"

  test -d "${gramps_dir}" || panic "Not a gramps repo: ${directory_path}"

  sha256sum --check "${gramps_dir}/sha256sum"

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        gramps_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    init)
      action="init"
      shift
      gramps_init_parse_requirements "$@"
      shift $#
      ;;

    encrypt)
      action="encrypt"
      shift
      gramps_encrypt_parse_requirements "$@"
      shift $#
      ;;

    decrypt)
      action="decrypt"
      shift
      gramps_decrypt_parse_requirements "$@"
      shift $#
      ;;

    check)
      action="check"
      shift
      gramps_check_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      gramps_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
gramps_init_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        gramps_init_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="init"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['repository_path']+x} ]]; then

          args['repository_path']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.parse_requirements
gramps_encrypt_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        gramps_encrypt_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="encrypt"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --repo | -d)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--repo']="$2"
          shift
          shift
        else
          printf "%s\n" "--repo requires an argument: --repo, -d REPOSITORY_PATH" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --filename | -n)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--filename']="$2"
          shift
          shift
        else
          printf "%s\n" "--filename requires an argument: --filename, -n FILE_NAME" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['input_path']+x} ]]; then

          args['input_path']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.parse_requirements
gramps_decrypt_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        gramps_decrypt_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="decrypt"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['input_path']+x} ]]; then

          args['input_path']=$1
          shift
        elif [[ -z ${args['output_path']+x} ]]; then

          args['output_path']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['input_path']+x} ]]; then
    printf "missing required argument: INPUT_PATH\nusage: gramps decrypt INPUT_PATH [OUTPUT_PATH]\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
gramps_check_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        gramps_check_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="check"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['directory_path']+x} ]]; then

          args['directory_path']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['directory_path']+x} ]]; then
    printf "missing required argument: DIRECTORY_PATH\nusage: gramps check DIRECTORY_PATH\n" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -Eeuo pipefail

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "init") gramps_init_command ;;
    "encrypt") gramps_encrypt_command ;;
    "decrypt") gramps_decrypt_command ;;
    "check") gramps_check_command ;;
  esac
}

initialize
run "$@"
